[[elasticsearch-intro]]
== What is {es}?

{es} is a distributed search and analytics engine. You add JSON data to {es} and can search it in near real-time.

{es} supports a growing number of use cases. These uses cases typically fall into one of two categories:

**Content search**
Content is a collection of items, such as a catalog of products or a website's pages, you want to search. If you want to use {es} to power a search bar or as a search backend for an application, your data likely fits this use case.{es} offers near real-time searches and can scale with your application.

**Time series data analysis**
Time series data is a stream of continuously generated timestamped data, such as log entries or metrics. Once in {es}, you can analyze and visualize your data using {kib} and other Elastic features. Time series data tends to grow over time but often becomes less valuable as it ages. {es} offers several features to help you manage the costs of storing time series data.

[[rest-api]]
=== REST APIs

You send data and other requests to {es} using REST APIs. This lets you interact with {es} using any client that sends HTTP requests, such as https://curl.se[curl]. You can also use {kib}'s console to send requests to {es}.

[[cluster-node-data-tier]]
=== Clusters, nodes, and data tiers

When you interact with {es}, you interact with a cluster. A cluster is made up of one or more connected nodes.
Each node is a single {es} server.

Each node is assigned one or more roles, called node roles. These roles determine the tasks the node handles for the cluster, such as storing data or processing searches.

For example, each cluster must have at least one node with the `master` role. Nodes with the `master` role can manage the cluster's state. The cluster state contains information about all the indices in the cluster, including their mappings, as well as templates and other metadata.

Nodes with roles related to data storage are called data nodes. Nodes with similar hardware are grouped into data tiers. For time series data, {es} uses these tiers to automatically move older data to nodes with less expensive hardware as it ages.

For example, you typically store new log entries on faster nodes in the hot tier. As this data gets older, {es} will automatically move the data to less expensive nodes on the warm tier. Later, {es} will move the data to
the even less expensive cold or frozen tiers.

[[document-indices-data-streams]]
=== Documents, indices, and data streams

You add data to Elasticsearch as JSON objects called documents. Elasticsearch stores these documents in searchable indices. The process of adding documents to {es} is called indexing.

Each index also has mappings and settings. An index's mapping defines how documents, and the fields those documents contain, are stored in the index. The index's settings configure how the index works in {es}.

For time series data, you typically add documents to a data stream made up of multiple auto-generated backing indices. A data stream requires an index template that matches its name. This template contains mappings and settings for the stream’s backing indices.

[[shards]]
=== Shards

{es} can store an index’s data across multiple shards. There are two types of shards: primary and replica. A primary shard is an Apache Lucene instance containing some or all of an index's data. A replica is a copy of a primary shard.

When you index a document, {es} adds the document to primary shards before replicas. However, when you search an index, any shard containing the data can handle the request.

This helps you horizontally scale as you add data. It also protects against hardware failure. For example, if a node containing a primary shard fails, a replica can take its place.
