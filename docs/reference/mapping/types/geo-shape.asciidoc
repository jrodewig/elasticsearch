[[geo-shape]]
=== Geoshape field type
++++
<titleabbrev>Geoshape</titleabbrev>
++++

Use `geo_shape` for shapes made up of latitude and longitude pairs. A Geoshape,
such as a rectangle or polygon, often represents the shape of a place.
`geo_shape` field values support the http://geojson.org[GeoJSON] and
https://docs.opengeospatial.org/is/12-063r5/12-063r5.html[WKT]
formats.

TIP: `geo_shape` is designed for geographic data. For cartesian shapes, use the
<<shape,`shape`>> field type.

The following create index request includes a mapping for a `geo_shape` field
named `location`.

[source,console]
----
PUT my-index
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_shape"
      }
    }
  }
}
----
// TESTSETUP

[[geo-shape-mapping-options]]
==== Mapping options

`coerce`::
(Optional, Boolean) If `true`, the field automatically closes unclosed linear
rings in polygons. Defaults to `true`.

`ignore_malformed`::
(Optional, Boolean) If `true`, malformed GeoJSON or WKT shapes are ignored
during indexing. If `false`, malformed GeoJSON and WKT shapes return an error
and reject the document. Defaults to `false`.

`ignore_z_value`::
(Optional, Boolean) If `true`, the field accepts coordinate values containing
three dimension points but only indexes the latitude and longitude values. The third
dimension is stored in the source but not indexed.
+
If `false`, coordinate values containing more than two dimensions return an
error and reject the document. Defaults to `true`.

`orientation`::
+
--
(Optional, string) Vertex order for the shape's coordinates list.

This parameter sets and returns only a `RIGHT` (counterclockwise) or `LEFT`
(clockwise) value. However, you can specify either value in multiple ways.

To set `RIGHT`, use one of the following arguments or its uppercase
variant:

* `right`
* `counterclockwise`
* `ccw`

To set `LEFT`, use one of the following arguments or its uppercase
variant:

* `left`
* `clockwise`
* `cw`

Defaults to `RIGHT` to comply with https://www.ogc.org/docs/is[OGC standards].
OGC standards define outer ring vertices in counterclockwise order with inner
ring (hole) vertices in clockwise order.

Individual GeoJSON or WKT coordinates can override this parameter.
--

[role="child_attributes"]
[[indexing-geoshape-values]]
==== Indexing `geo_shape` values

When indexing coordinates in the GeoJSON format, the `type` and `coordinates`
parameters are required.

[source,console]
----
POST my-index/_doc
{
  "location" : {
    "type" : "polygon",
    "coordinates" : [
      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]
    ]
  }
}
----

`coordinates`::
(Array) An array of coordinate arrays for the shape. Supports WGS-84
coordinates only.

`type`::
(Required, string) Describes the shape of the `coordinates`. Most values
correspond to a GeoJSON and WKT geometry type of the same name.
+
.Valid `type` values
[%collapsible%open]
====
`point`::
A single geographic coordinate. 

`linestring`::
An arbitrary line made up of two or more points.

`polygon`::
A closed polygon whose first and last point must be the same. To create an
`n`-sided polygon, you must include `n + 1` vertices, with a minimum of `4`
vertices.

`multipoint`::
An array of unconnected points.

`multilinestring`::
An array of unconnected linestrings.

`multipolygon`::
An array of separate polygons.

`geometrycollection`::
An array of shapes. Unlike other `multi*` values, a `geometrycollection` can
contain multiple shape types, such as a point and a linestring.

`envelope`::
Bounding rectangle specified only by the top left and bottom right points.
Corresponds to WKT's `BBOX` geometry type. There is no corresponding GeoJSON
geometry type.

====

The WKT format does not support the `type` and `coordinates` parameters.

[source,console]
----
POST my-index/_doc
{
  "location" : "POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0))"
}
----

[[geoshape-indexing-approach]]
[discrete]
==== Indexing approach
GeoShape types are indexed by decomposing the shape into a triangular mesh and
indexing each triangle as a 7 dimension point in a BKD tree. This provides
near perfect spatial resolution (down to 1e-7 decimal degree precision) since all
spatial relations are computed using an encoded vector representation of the
original shape instead of a raster-grid representation. Performance of the tessellator primarily
depends on the number of vertices that define the polygon/multi-polygon. While
this is the default indexing technique prefix trees can still be used by setting
the `tree` or `strategy` parameters according to the appropriate
<<geo-shape-mapping-options>>. Note that these parameters are now deprecated
and will be removed in a future version.

*IMPORTANT NOTES*

`CONTAINS` relation query - when using the new default vector indexing strategy, `geo_shape`
queries with `relation` defined as `contains` are supported for indices created with
ElasticSearch 7.5.0 or higher.

[discrete]
===== Example

[source,console]
--------------------------------------------------
PUT /example
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_shape"
      }
    }
  }
}
--------------------------------------------------
// TESTSETUP

This mapping definition maps the location field to the geo_shape
type using the default vector implementation. It provides
approximately 1e-7 decimal degree precision.


[[input-structure]]
[discrete]
==== Input Structure

Shapes can be represented using either the http://geojson.org[GeoJSON]
or https://docs.opengeospatial.org/is/12-063r5/12-063r5.html[Well-Known Text]
(WKT) format. The following table provides a mapping of GeoJSON and WKT
to Elasticsearch types:

[cols="<,<,<,<",options="header",]
|=======================================================================
|GeoJSON Type |WKT Type |Elasticsearch Type |Description

|`Point` |`POINT` |`point` |A single geographic coordinate. Note: Elasticsearch uses WGS-84 coordinates only.
|`LineString` |`LINESTRING` |`linestring` |An arbitrary line given two or more points.
|`Polygon` |`POLYGON` |`polygon` |A _closed_ polygon whose first and last point
must match, thus requiring `n + 1` vertices to create an `n`-sided
polygon and a minimum of `4` vertices.
|`MultiPoint` |`MULTIPOINT` |`multipoint` |An array of unconnected, but likely related
points.
|`MultiLineString` |`MULTILINESTRING` |`multilinestring` |An array of separate linestrings.
|`MultiPolygon` |`MULTIPOLYGON` |`multipolygon` |An array of separate polygons.
|`GeometryCollection` |`GEOMETRYCOLLECTION` |`geometrycollection` | A GeoJSON shape similar to the
`multi*` shapes except that multiple types can coexist (e.g., a Point
and a LineString).
|`N/A` |`BBOX` |`envelope` |A bounding rectangle, or envelope, specified by
specifying only the top left and bottom right points.
|`N/A` |`N/A` |`circle` |A circle specified by a center point and radius with
units, which default to `METERS`.
|=======================================================================

[NOTE]
=============================================
For all types, both the inner `type` and `coordinates` fields are
required.

In GeoJSON and WKT, and therefore Elasticsearch, the correct *coordinate
order is longitude, latitude (X, Y)* within coordinate arrays. This
differs from many Geospatial APIs (e.g., Google Maps) that generally
use the colloquial latitude, longitude (Y, X).
=============================================

[[geo-point-type]]
[discrete]
===== http://geojson.org/geojson-spec.html#id2[Point]

A point is a single geographic coordinate, such as the location of a
building or the current position given by a smartphone's Geolocation
API. The following is an example of a point in GeoJSON.

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type" : "point",
    "coordinates" : [-77.03653, 38.897676]
  }
}
--------------------------------------------------

The following is an example of a point in WKT:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : "POINT (-77.03653 38.897676)"
}
--------------------------------------------------

[discrete]
[[geo-linestring]]
===== http://geojson.org/geojson-spec.html#id3[LineString]

A `linestring` defined by an array of two or more positions. By
specifying only two points, the `linestring` will represent a straight
line. Specifying more than two points creates an arbitrary path. The
following is an example of a LineString in GeoJSON.

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type" : "linestring",
    "coordinates" : [[-77.03653, 38.897676], [-77.009051, 38.889939]]
  }
}
--------------------------------------------------

The following is an example of a LineString in WKT:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : "LINESTRING (-77.03653 38.897676, -77.009051 38.889939)"
}
--------------------------------------------------

The above `linestring` would draw a straight line starting at the White
House to the US Capitol Building.

[discrete]
[[geo-polygon]]
===== http://geojson.org/geojson-spec.html#id4[Polygon]

A polygon is defined by a list of a list of points. The first and last
points in each (outer) list must be the same (the polygon must be
closed). The following is an example of a Polygon in GeoJSON.

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type" : "polygon",
    "coordinates" : [
      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]
    ]
  }
}
--------------------------------------------------

The following is an example of a Polygon in WKT:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : "POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0))"
}
--------------------------------------------------

The first array represents the outer boundary of the polygon, the other
arrays represent the interior shapes ("holes"). The following is a GeoJSON example
of a polygon with a hole:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type" : "polygon",
    "coordinates" : [
      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ],
      [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2] ]
    ]
  }
}
--------------------------------------------------

The following is an example of a Polygon with a hole in WKT:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : "POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8, 100.2 0.2))"
}
--------------------------------------------------

*IMPORTANT NOTE:* WKT does not enforce a specific order for vertices thus
ambiguous polygons around the dateline and poles are possible.
https://tools.ietf.org/html/rfc7946#section-3.1.6[GeoJSON] mandates that the
outer polygon must be counterclockwise and interior shapes must be clockwise,
which agrees with the Open Geospatial Consortium (OGC)
https://www.opengeospatial.org/standards/sfa[Simple Feature Access]
specification for vertex ordering.

Elasticsearch accepts both clockwise and counterclockwise polygons if they
appear not to cross the dateline (i.e. they cross less than 180° of longitude),
but for polygons that do cross the dateline (or for other polygons wider than
180°) Elasticsearch requires the vertex ordering to comply with the OGC and
GeoJSON specifications. Otherwise, an unintended polygon may be created and
unexpected query/filter results will be returned.

The following provides an example of an ambiguous polygon. Elasticsearch will
apply the GeoJSON standard to eliminate ambiguity resulting in a polygon that
crosses the dateline.

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type" : "polygon",
    "coordinates" : [
      [ [-177.0, 10.0], [176.0, 15.0], [172.0, 0.0], [176.0, -15.0], [-177.0, -10.0], [-177.0, 10.0] ],
      [ [178.2, 8.2], [-178.8, 8.2], [-180.8, -8.8], [178.2, 8.8] ]
    ]
  }
}
--------------------------------------------------
// TEST[catch:/mapper_parsing_exception/]

An `orientation` parameter can be defined when setting the geo_shape mapping (see <<geo-shape-mapping-options>>). This will define vertex
order for the coordinate list on the mapped geo_shape field. It can also be overridden on each document. The following is an example for
overriding the orientation on a document:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type" : "polygon",
    "orientation" : "clockwise",
    "coordinates" : [
      [ [100.0, 0.0], [100.0, 1.0], [101.0, 1.0], [101.0, 0.0], [100.0, 0.0] ]
    ]
  }
}
--------------------------------------------------

[discrete]
[[geo-multipoint]]
===== http://geojson.org/geojson-spec.html#id5[MultiPoint]

The following is an example of a list of geojson points:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type" : "multipoint",
    "coordinates" : [
      [102.0, 2.0], [103.0, 2.0]
    ]
  }
}
--------------------------------------------------

The following is an example of a list of WKT points:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : "MULTIPOINT (102.0 2.0, 103.0 2.0)"
}
--------------------------------------------------

[discrete]
[[geo-multilinestring]]
===== http://geojson.org/geojson-spec.html#id6[MultiLineString]

The following is an example of a list of geojson linestrings:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type" : "multilinestring",
    "coordinates" : [
      [ [102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0] ],
      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0] ],
      [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8] ]
    ]
  }
}
--------------------------------------------------

The following is an example of a list of WKT linestrings:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : "MULTILINESTRING ((102.0 2.0, 103.0 2.0, 103.0 3.0, 102.0 3.0), (100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8))"
}
--------------------------------------------------

[discrete]
[[geo-multipolygon]]
===== http://geojson.org/geojson-spec.html#id7[MultiPolygon]

The following is an example of a list of geojson polygons (second polygon contains a hole):

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type" : "multipolygon",
    "coordinates" : [
      [ [[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]] ],
      [ [[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],
        [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]] ]
    ]
  }
}
--------------------------------------------------

The following is an example of a list of WKT polygons (second polygon contains a hole):

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : "MULTIPOLYGON (((102.0 2.0, 103.0 2.0, 103.0 3.0, 102.0 3.0, 102.0 2.0)), ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8, 100.2 0.2)))"
}
--------------------------------------------------

[discrete]
[[geo-geometry_collection]]
===== http://geojson.org/geojson-spec.html#geometrycollection[Geometry Collection]

The following is an example of a collection of geojson geometry objects:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type": "geometrycollection",
    "geometries": [
      {
        "type": "point",
        "coordinates": [100.0, 0.0]
      },
      {
        "type": "linestring",
        "coordinates": [ [101.0, 0.0], [102.0, 1.0] ]
      }
    ]
  }
}
--------------------------------------------------

The following is an example of a collection of WKT geometry objects:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : "GEOMETRYCOLLECTION (POINT (100.0 0.0), LINESTRING (101.0 0.0, 102.0 1.0))"
}
--------------------------------------------------


[discrete]
===== Envelope

Elasticsearch supports an `envelope` type, which consists of coordinates
for upper left and lower right points of the shape to represent a
bounding rectangle in the format `[[minLon, maxLat], [maxLon, minLat]]`:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type" : "envelope",
    "coordinates" : [ [100.0, 1.0], [101.0, 0.0] ]
  }
}
--------------------------------------------------

The following is an example of an envelope using the WKT BBOX format:

*NOTE:* WKT specification expects the following order: minLon, maxLon, maxLat, minLat.

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : "BBOX (100.0, 102.0, 2.0, 0.0)"
}
--------------------------------------------------

[discrete]
===== Circle

Elasticsearch supports a `circle` type, which consists of a center
point with a radius.

IMPORTANT: You cannot index the `circle` type using the default
<<geoshape-indexing-approach,BKD tree indexing approach>>. Instead, use a
<<ingest-circle-processor,circle ingest processor>> to approximate the circle as
a <<geo-polygon,`polygon`>>.

*NOTE:* Neither GeoJSON or WKT support a point-radius circle type.

[discrete]
==== Sorting and Retrieving index Shapes

Due to the complex input structure and index representation of shapes,
it is not currently possible to sort shapes or retrieve their fields
directly. The geo_shape value is only retrievable through the `_source`
field.


You can search `geo_shape` fields using the
<<query-dsl-geo-shape-query,`geo_shape` query>>.